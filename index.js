/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable no-param-reassign */
const path = require('path');
const rtlcss = require('rtlcss');
const { sources } = require('webpack');

const cssOnly = filename => path.extname(filename) === '.css';

// default options for the plugin
const defaultOptions = {
  filename: '[name].rtl.css',
  chunkFilename: '[name].rtl.css',
};

/**
 * Rtl CSS webpack Plugin
 * with additional support for chunkFileName support option
 */
class RtlCssPluginWebpack {
  constructor(options) {
    this.options = { ...defaultOptions, ...options };
  }

  processAssets(compilation, callback) {
    const chunks = Array.from(compilation.chunks);

    // Explore each chunk (build output):
    chunks.forEach(chunk => {
      // Explore each asset filename generated by the chunk:
      const files = Array.from(chunk.files);
      const filenameTemplate = chunk.canBeInitial() ? this.options.filename : this.options.chunkFilename;
      files.filter(cssOnly).forEach(filename => {
        // Get the asset source for each file generated by the chunk:
        const src = compilation.assets[filename].source();
        const dst = rtlcss.process(src);
        const dstFileName = compilation.getPath(filenameTemplate, {
          chunk,
          cssFileName: filename,
        });

        compilation.assets[dstFileName] = new sources.RawSource(dst);
        chunk.files.add(dstFileName);
      });
    });

    callback();
  }

  apply(compiler) {
    compiler.hooks.compilation.tap('RtlCssPluginWebpack', compilation => {
      compilation.hooks.processAssets.tapAsync(
        {
          name: 'RtlCssPluginWebpack',
          stage: compilation.PROCESS_ASSETS_STAGE_OPTIMIZE,
        },
        (chunks, callback) => this.processAssets(compilation, callback)
      );
    });
  }
}

module.exports = RtlCssPluginWebpack;
